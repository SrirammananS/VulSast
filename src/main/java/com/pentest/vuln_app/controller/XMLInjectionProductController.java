package com.pentest.vuln_app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;

import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;

@Controller
public class XMLInjectionProductController {

    @GetMapping("/xml-product-form")
    public String showForm() {
        return "xml-product-form";  // View for product query form
    }

    @GetMapping("/xml-product-search-vuln")
    public String searchProduct(@RequestParam String productId, Model model) {
        String productInfo = getProductInfo(productId, false);  // Vulnerable version
        model.addAttribute("productInfo", productInfo != null ? productInfo : "Product not found");
        return "xml-product-result";  // View to show the product info
    }

    @GetMapping("/xml-product-search-safe")
    public String searchProductSafe(@RequestParam String productId, Model model) {
        String productInfo = getProductInfo(productId, true);  // Safe version
        model.addAttribute("productInfo", productInfo != null ? productInfo : "Product not found");
        return "xml-product-result";  // View to show the product info
    }

    private String getProductInfo(String productId, boolean safe) {
        try {
            InputStream is = getClass().getResourceAsStream("/products.xml");
            if (is == null) {
                return "XML file not found!";
            }

            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);
            XPath xpath = XPathFactory.newInstance().newXPath();

            if (safe) {
                productId = escapeXML(productId);
            }

            String expr = String.format("//product[id/text()='%s']", productId);
            NodeList nodes = (NodeList) xpath.evaluate(expr, doc, XPathConstants.NODESET);

            if (nodes.getLength() > 0) {
                var productNode = nodes.item(0);

                String name = ((org.w3c.dom.Element) productNode).getElementsByTagName("name").item(0).getTextContent();
                String price = ((org.w3c.dom.Element) productNode).getElementsByTagName("price").item(0).getTextContent();

                return String.format("Product Found: %s (â‚¹%s)", name, price);
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "Error during XML processing!";
        }
        return null;
    }

    // Safe method to escape special characters in the productId input
    private String escapeXML(String input) {
        if (input == null) {
            return "";
        }
        // Escape special characters for XML
        return input.replace("&", "&amp;")
                    .replace("<", "&lt;")
                    .replace(">", "&gt;")
                    .replace("'", "&apos;")
                    .replace("\"", "&quot;");
    }
}
