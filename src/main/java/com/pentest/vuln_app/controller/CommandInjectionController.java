package com.pentest.vuln_app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.io.BufferedReader;
import java.io.InputStreamReader;

@Controller
public class CommandInjectionController {

    // Vulnerable endpoint (for demo only)
    @GetMapping("/command-injection-vuln")
    public String commandInjectionVuln(@RequestParam String command, Model model) {
        String result = executeCommand(command); // Executes user input directly (Vulnerable)
        model.addAttribute("result", result);
        return "command-form";
    }

    // Safe endpoint
    @GetMapping("/command-injection-safe")
    public String commandInjectionSafe(@RequestParam String command, Model model) {
        String result = executeSafeCommand(command); // Only allows pre-defined commands
        model.addAttribute("result", result);
        return "command-form";
    }

    // Vulnerable command execution using ProcessBuilder
    private String executeCommand(String command) {
        try {
            ProcessBuilder builder = new ProcessBuilder(command.split(" "));
            builder.redirectErrorStream(true);
            Process process = builder.start();

            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder result = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line).append("\n");
            }
            return result.toString();
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    // Safe command execution with command whitelist
    private String executeSafeCommand(String command) {
        try {
            if ("ls".equals(command) || "date".equals(command) || "dir".equals(command)) {
                ProcessBuilder builder = new ProcessBuilder(command);
                builder.redirectErrorStream(true);
                Process process = builder.start();

                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                StringBuilder result = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    result.append(line).append("\n");
                }
                return result.toString();
            } else {
                return "Command not allowed!";
            }
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }
}
