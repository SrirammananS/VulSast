package com.pentest.vuln_app.controller;

import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.io.IOException;
import java.io.PrintWriter;

@Controller
public class FormulaInjectionController {

    // Show form page
    @GetMapping("/formula-form")
    public String showForm() {
        return "formula-form";
    }

    // Handle form submission and store input in session
    @GetMapping("/submit-username")
    public String submitUsername(@RequestParam String username, HttpSession session) {
        session.setAttribute("username", username);
        return "formula-options";
    }

    // Export vulnerable CSV
    @GetMapping("/export-vuln-csv")
    public void exportVuln(HttpSession session, HttpServletResponse response) throws IOException {
        String username = (String) session.getAttribute("username");

        response.setContentType("text/csv");
        response.setHeader("Content-Disposition", "attachment; filename=\"vuln.csv\"");

        PrintWriter writer = response.getWriter();
        writer.println("Username");
        writer.println(username); // ❌ no sanitization
        writer.flush();
        writer.close();
    }

    // Export safe CSV
    @GetMapping("/export-safe-csv")
    public void exportSafe(HttpSession session, HttpServletResponse response) throws IOException {
        String username = (String) session.getAttribute("username");

        response.setContentType("text/csv");
        response.setHeader("Content-Disposition", "attachment; filename=\"safe.csv\"");

        PrintWriter writer = response.getWriter();
        writer.println("Username");
        writer.println(sanitizeForCSV(username)); // ✅ sanitized
        writer.flush();
        writer.close();
    }

    // Prevents formula injection by prefixing with '
    private String sanitizeForCSV(String input) {
        if (input == null) return "";
        if (input.startsWith("=") || input.startsWith("+") || input.startsWith("-") || input.startsWith("@")) {
            return "'" + input;
        }
        return input;
    }
}
